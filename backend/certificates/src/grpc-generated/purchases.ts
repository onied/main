// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies,force_server_none
// @generated from protobuf file "purchases.proto" (package "purchasesGrpc", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DecimalValue } from "./decimalValue";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message purchasesGrpc.VerifyTokenRequest
 */
export interface VerifyTokenRequest {
  /**
   * @generated from protobuf field: string token = 1;
   */
  token: string;
}
/**
 * @generated from protobuf message purchasesGrpc.VerifyTokenReply
 */
export interface VerifyTokenReply {
  /**
   * @generated from protobuf field: purchasesGrpc.VerificationOutcome verificationOutcome = 1;
   */
  verificationOutcome: VerificationOutcome;
}
/**
 * @generated from protobuf message purchasesGrpc.GetActiveSubscriptionRequest
 */
export interface GetActiveSubscriptionRequest {
  /**
   * @generated from protobuf field: bytes userId = 1;
   */
  userId: Uint8Array;
}
/**
 * @generated from protobuf message purchasesGrpc.GetActiveSubscriptionReply
 */
export interface GetActiveSubscriptionReply {
  /**
   * @generated from protobuf field: int32 id = 1;
   */
  id: number;
  /**
   * @generated from protobuf field: string title = 2;
   */
  title: string;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp endDate = 3;
   */
  endDate?: Timestamp;
  /**
   * @generated from protobuf field: bool autoRenewalEnabled = 4;
   */
  autoRenewalEnabled: boolean;
  /**
   * @generated from protobuf field: bool coursesHighlightingEnabled = 5;
   */
  coursesHighlightingEnabled: boolean;
  /**
   * @generated from protobuf field: bool adsEnabled = 6;
   */
  adsEnabled: boolean;
  /**
   * @generated from protobuf field: bool certificatesEnabled = 7;
   */
  certificatesEnabled: boolean;
  /**
   * @generated from protobuf field: bool autoTestsReview = 8;
   */
  autoTestsReview: boolean;
  /**
   * @generated from protobuf field: bool courseCreatingEnabled = 9;
   */
  courseCreatingEnabled: boolean;
  /**
   * @generated from protobuf field: int32 activeCoursesNumber = 10;
   */
  activeCoursesNumber: number;
  /**
   * @generated from protobuf field: int32 studentsOnCourseLimit = 11;
   */
  studentsOnCourseLimit: number;
  /**
   * @generated from protobuf field: decimalValue.DecimalValue price = 12;
   */
  price?: DecimalValue;
}
/**
 * @generated from protobuf enum purchasesGrpc.VerificationOutcome
 */
export enum VerificationOutcome {
  /**
   * @generated from protobuf enum value: OK = 0;
   */
  OK = 0,
  /**
   * @generated from protobuf enum value: FORBID = 1;
   */
  FORBID = 1,
  /**
   * @generated from protobuf enum value: BAD_REQUEST = 2;
   */
  BAD_REQUEST = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class VerifyTokenRequest$Type extends MessageType<VerifyTokenRequest> {
  constructor() {
    super("purchasesGrpc.VerifyTokenRequest", [
      { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<VerifyTokenRequest>): VerifyTokenRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.token = "";
    if (value !== undefined)
      reflectionMergePartial<VerifyTokenRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: VerifyTokenRequest
  ): VerifyTokenRequest {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string token */ 1:
          message.token = reader.string();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: VerifyTokenRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string token = 1; */
    if (message.token !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.token);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message purchasesGrpc.VerifyTokenRequest
 */
export const VerifyTokenRequest = new VerifyTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyTokenReply$Type extends MessageType<VerifyTokenReply> {
  constructor() {
    super("purchasesGrpc.VerifyTokenReply", [
      {
        no: 1,
        name: "verificationOutcome",
        kind: "enum",
        T: () => ["purchasesGrpc.VerificationOutcome", VerificationOutcome],
      },
    ]);
  }
  create(value?: PartialMessage<VerifyTokenReply>): VerifyTokenReply {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.verificationOutcome = 0;
    if (value !== undefined)
      reflectionMergePartial<VerifyTokenReply>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: VerifyTokenReply
  ): VerifyTokenReply {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* purchasesGrpc.VerificationOutcome verificationOutcome */ 1:
          message.verificationOutcome = reader.int32();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: VerifyTokenReply,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* purchasesGrpc.VerificationOutcome verificationOutcome = 1; */
    if (message.verificationOutcome !== 0)
      writer.tag(1, WireType.Varint).int32(message.verificationOutcome);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message purchasesGrpc.VerifyTokenReply
 */
export const VerifyTokenReply = new VerifyTokenReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActiveSubscriptionRequest$Type extends MessageType<GetActiveSubscriptionRequest> {
  constructor() {
    super("purchasesGrpc.GetActiveSubscriptionRequest", [
      { no: 1, name: "userId", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(
    value?: PartialMessage<GetActiveSubscriptionRequest>
  ): GetActiveSubscriptionRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.userId = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<GetActiveSubscriptionRequest>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetActiveSubscriptionRequest
  ): GetActiveSubscriptionRequest {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes userId */ 1:
          message.userId = reader.bytes();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetActiveSubscriptionRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* bytes userId = 1; */
    if (message.userId.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.userId);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message purchasesGrpc.GetActiveSubscriptionRequest
 */
export const GetActiveSubscriptionRequest =
  new GetActiveSubscriptionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActiveSubscriptionReply$Type extends MessageType<GetActiveSubscriptionReply> {
  constructor() {
    super("purchasesGrpc.GetActiveSubscriptionReply", [
      { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "endDate", kind: "message", T: () => Timestamp },
      {
        no: 4,
        name: "autoRenewalEnabled",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 5,
        name: "coursesHighlightingEnabled",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      { no: 6, name: "adsEnabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
      {
        no: 7,
        name: "certificatesEnabled",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 8,
        name: "autoTestsReview",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 9,
        name: "courseCreatingEnabled",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 10,
        name: "activeCoursesNumber",
        kind: "scalar",
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 11,
        name: "studentsOnCourseLimit",
        kind: "scalar",
        T: 5 /*ScalarType.INT32*/,
      },
      { no: 12, name: "price", kind: "message", T: () => DecimalValue },
    ]);
  }
  create(
    value?: PartialMessage<GetActiveSubscriptionReply>
  ): GetActiveSubscriptionReply {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.id = 0;
    message.title = "";
    message.autoRenewalEnabled = false;
    message.coursesHighlightingEnabled = false;
    message.adsEnabled = false;
    message.certificatesEnabled = false;
    message.autoTestsReview = false;
    message.courseCreatingEnabled = false;
    message.activeCoursesNumber = 0;
    message.studentsOnCourseLimit = 0;
    if (value !== undefined)
      reflectionMergePartial<GetActiveSubscriptionReply>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetActiveSubscriptionReply
  ): GetActiveSubscriptionReply {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 id */ 1:
          message.id = reader.int32();
          break;
        case /* string title */ 2:
          message.title = reader.string();
          break;
        case /* google.protobuf.Timestamp endDate */ 3:
          message.endDate = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.endDate
          );
          break;
        case /* bool autoRenewalEnabled */ 4:
          message.autoRenewalEnabled = reader.bool();
          break;
        case /* bool coursesHighlightingEnabled */ 5:
          message.coursesHighlightingEnabled = reader.bool();
          break;
        case /* bool adsEnabled */ 6:
          message.adsEnabled = reader.bool();
          break;
        case /* bool certificatesEnabled */ 7:
          message.certificatesEnabled = reader.bool();
          break;
        case /* bool autoTestsReview */ 8:
          message.autoTestsReview = reader.bool();
          break;
        case /* bool courseCreatingEnabled */ 9:
          message.courseCreatingEnabled = reader.bool();
          break;
        case /* int32 activeCoursesNumber */ 10:
          message.activeCoursesNumber = reader.int32();
          break;
        case /* int32 studentsOnCourseLimit */ 11:
          message.studentsOnCourseLimit = reader.int32();
          break;
        case /* decimalValue.DecimalValue price */ 12:
          message.price = DecimalValue.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.price
          );
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetActiveSubscriptionReply,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 id = 1; */
    if (message.id !== 0) writer.tag(1, WireType.Varint).int32(message.id);
    /* string title = 2; */
    if (message.title !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.title);
    /* google.protobuf.Timestamp endDate = 3; */
    if (message.endDate)
      Timestamp.internalBinaryWrite(
        message.endDate,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* bool autoRenewalEnabled = 4; */
    if (message.autoRenewalEnabled !== false)
      writer.tag(4, WireType.Varint).bool(message.autoRenewalEnabled);
    /* bool coursesHighlightingEnabled = 5; */
    if (message.coursesHighlightingEnabled !== false)
      writer.tag(5, WireType.Varint).bool(message.coursesHighlightingEnabled);
    /* bool adsEnabled = 6; */
    if (message.adsEnabled !== false)
      writer.tag(6, WireType.Varint).bool(message.adsEnabled);
    /* bool certificatesEnabled = 7; */
    if (message.certificatesEnabled !== false)
      writer.tag(7, WireType.Varint).bool(message.certificatesEnabled);
    /* bool autoTestsReview = 8; */
    if (message.autoTestsReview !== false)
      writer.tag(8, WireType.Varint).bool(message.autoTestsReview);
    /* bool courseCreatingEnabled = 9; */
    if (message.courseCreatingEnabled !== false)
      writer.tag(9, WireType.Varint).bool(message.courseCreatingEnabled);
    /* int32 activeCoursesNumber = 10; */
    if (message.activeCoursesNumber !== 0)
      writer.tag(10, WireType.Varint).int32(message.activeCoursesNumber);
    /* int32 studentsOnCourseLimit = 11; */
    if (message.studentsOnCourseLimit !== 0)
      writer.tag(11, WireType.Varint).int32(message.studentsOnCourseLimit);
    /* decimalValue.DecimalValue price = 12; */
    if (message.price)
      DecimalValue.internalBinaryWrite(
        message.price,
        writer.tag(12, WireType.LengthDelimited).fork(),
        options
      ).join();
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message purchasesGrpc.GetActiveSubscriptionReply
 */
export const GetActiveSubscriptionReply = new GetActiveSubscriptionReply$Type();
/**
 * @generated ServiceType for protobuf service purchasesGrpc.PurchasesService
 */
export const PurchasesService = new ServiceType(
  "purchasesGrpc.PurchasesService",
  [{ name: "Verify", options: {}, I: VerifyTokenRequest, O: VerifyTokenReply }]
);
/**
 * @generated ServiceType for protobuf service purchasesGrpc.SubscriptionService
 */
export const SubscriptionService = new ServiceType(
  "purchasesGrpc.SubscriptionService",
  [
    {
      name: "GetActiveSubscription",
      options: {},
      I: GetActiveSubscriptionRequest,
      O: GetActiveSubscriptionReply,
    },
  ]
);
