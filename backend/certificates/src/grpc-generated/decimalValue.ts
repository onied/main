// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies,force_server_none
// @generated from protobuf file "decimalValue.proto" (package "decimalValue", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message decimalValue.DecimalValue
 */
export interface DecimalValue {
  /**
   * @generated from protobuf field: int64 units = 1;
   */
  units: bigint;
  /**
   * @generated from protobuf field: sfixed32 nanos = 2;
   */
  nanos: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class DecimalValue$Type extends MessageType<DecimalValue> {
  constructor() {
    super("decimalValue.DecimalValue", [
      {
        no: 1,
        name: "units",
        kind: "scalar",
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 2, name: "nanos", kind: "scalar", T: 15 /*ScalarType.SFIXED32*/ },
    ]);
  }
  create(value?: PartialMessage<DecimalValue>): DecimalValue {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.units = 0n;
    message.nanos = 0;
    if (value !== undefined)
      reflectionMergePartial<DecimalValue>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DecimalValue
  ): DecimalValue {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int64 units */ 1:
          message.units = reader.int64().toBigInt();
          break;
        case /* sfixed32 nanos */ 2:
          message.nanos = reader.sfixed32();
          break;
        default:
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DecimalValue,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int64 units = 1; */
    if (message.units !== 0n)
      writer.tag(1, WireType.Varint).int64(message.units);
    /* sfixed32 nanos = 2; */
    if (message.nanos !== 0)
      writer.tag(2, WireType.Bit32).sfixed32(message.nanos);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message decimalValue.DecimalValue
 */
export const DecimalValue = new DecimalValue$Type();
